1: npm init -y

2: npm install express ejs mongoose body-parser b-crypt express-session

3:usar template bootstrap contendo as pasta public/ js, css e pasta views com arquivos ejs

4: criar mains index.js

5: criar models/user.js usando o bcrypt pra criptografar o password

6: usar o modelo de segurança bcrypt dentro do Schema em models/user.js, usando hash pra toda vez que salvar ja ter a senha criptografada

7: pra garantir que haja um usuário root em index.js criar modulo de criação de usuário createInitialUser()  ne tem uma condicional caso nao haja usuario ele cria um usuario automaticamente, e seguida chamar esse modulo no connect

8: criar models/noticia.js com schema dde criação de noticia

9: criar routes/noticias.js e routes/restrito.js  pra traçar a rota de noticia livre e noticias restritas

10: pra limitar o acesso somente a restrito usar o express-session com a propriedade secret usuando ela como condicional na rota /restrito caso seja cessada depois da condicional no else usar o redirect pra rota /login

11: criar a rota /login, o arquivo login.ejs criar formulário ou copiar do tailwind ou bootstrap adaptar ao projeto inserir o "name " pra comunicação do backend e tambem inserir no formulá o method="post" com o uso do body-parser pra enviar os dados ao banco de dados

12: em models/ user.js criar o metodo checkPassword atrelado ao UserSchema usando a condicional e o compare, em seguida chamar o metodo em index no modulo post na rota app.use(./login) se a senha for verdadeiro o isValid será true e o redirect ira pra /noticia/restrito se for falsa será false i a pagina será redirecionada para /login novamente

13: pra mostrar se o usuario está logado... criar um general middleware que garanti as variáveis dentro do restrito pra o user logado em index.js sem rotas pra abranger a todas 

14:em views/partials/header substituir um dos elementos da navbar  add: <%- locals.user.username %> em un dos elementos <a> do navbar pra mostrar o nome do usuario depois criar uma condicional pra caso não esteja logado clicar no link da navbar "Entrar" com a rota pra o login

15: estando em header.ejs configuramos a navbar pra traçar as rotas ao clicar nos links

16: criar routes/auth.js tranferir modulos de autenticação pra la depois importar pra index 

17: crair routes/pages.js e alocar a rota principal la depois importar de volta em mains index.ja

18: EM routes/noticias.js deixar o modulo asyncrono e da um find({}) pra renderizar em noticias/index, em seguida criar em views noticias/index.ejs e listar com <%%> as funções retornando asw noticias


19: Em main index.js importa models/noticias e  adicionar no createInitalUser noticia publica e privada pra serem criadas automaticamente v

NOTICIA PUBLICA
20: pra filtra noticias publicas e privadas em routes/noticia incluimos no find o category: public outra alternativa foi deixada comentada usando um condiconal em routes/noticia

NOTICIA PRIVADA 
21: pra filtra noticia privada em routes/restrito incluimos no find o category: private, em seguida criar em views/noticia/restri.ejs pra carregar a renderização de noticias privadas

LOGOUT
22: em routes/auth.js inserimo a rota logout com req.session.destroy() em seguida rum resdirect pra página principal, no header inserimos em um dos links <a> o Sair com a rota ./logout no dropdown

23: tranferir o general middleware pra router/auth e mudei de app pra router, em seguida no index.js deixar o "app.use(auth)" antes do app.use(noticia) e app.use(restrito) pra que abranja todos os modulos

24: tranferir tambem pra router/restrito o app.use(restrito)  e mudar app pra router e remover o '/restrito pra passar pelo middleware'

25: TRABALNAHDO COM PAPEIS
Em models/user adicionar uma nova propriedade roles: e nela add enum restrito e admin, em seguida em mainn index.js em createInitialUser criar dois usuarios iniciais um role restrito e admin e outro user2 com restrito apenas

26: criar em views/noticias/admin.ejs e crir em routes/admin.js e configura o midddleware com condiconais pra checar se tem usuario logado na sessão e se o usuario tem a role: admin

27:importar admin em main index.js depois inserir a rota app.use('/admin',admin)

28: